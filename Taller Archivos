def sumar_localidad(diccionario):
     datos={}
     for i in diccionario.values():
          if i[2] not in datos.keys():
               datos[i[2]]=1
          else:
               datos[i[2]]+=1
     print(datos)          
     return datos
def  contagiados_rango_fecha(dictionary, date_string_down, date_string_up):
     dictionary = dict(dictionary)
     top = date_string_up[:]
     low = date_string_down[:]
     counter = 0
     dictionary_2 = dict()
     set_1 = set()
     for index in range(1, (len(dictionary)+1 ), 1): 
          data = dictionary[index]
          date = data[0]
          localidad = data[2]
          if len(date) == 9:
               date = "0" + date          
          if (((int(date[:2]) >= int(low[:2])) and (int(date[:2]) <= int(top[:2]))) and ((int(date[3:5]) >= int(low[3:5])) and (int(date[3:5]) <= int(top[3:5])))):
               counter += 1
               if localidad in dictionary_2.keys():
                    X = dictionary_2[localidad]
                    X += 1
                    dictionary_2[localidad] = X
               else:
                    dictionary_2[localidad] = 1
               set_1.add(localidad)
     list_1 = list(set_1)
     list_2 = sorted(list_1)
     line = 47*"-"
     total = str(counter)
     string = " "*(22-len(total))
     string_2 = " "*(22-len("TOTAL"))
     print_1 = "|" + string_2 + "TOTAL" + "|" + string + total + "|"
     print(line)
     print("|             LOCALIDAD|  CASOS DIAGNOSTICADOS|")
     print(line)
     print(print_1)
     print(line)
     for key in list_2:
          character = str(dictionary_2[key])
          len_character = len(character)
          character_2 = " "*(22-len_character)
          character_3 = " "*(22-(len(key)))
          print_character = "|" + character_3 + key + "|" + character_2 + character + "|"
          print(print_character)
          print(line)
def leer_datos(archivo):
     Datos={}
     contagiado=[]
     lectura=open(archivo, "r")
     lineas=lectura.readlines()
     try:
          for n in range(1, len(lineas)):
               linea=lineas[n]
               primer_dicc=""
               for i in range(0,len(linea)):
                    if str(linea[i])!=",":
                         primer_dicc+=str(linea[i]).lower()
                    else:     
                         contagiado.append(primer_dicc)
                         primer_dicc=""
               primer_dicc=primer_dicc.replace("\n", "")          
               contagiado.append(primer_dicc)
               Datos[n]=contagiado
               n=n+1
               contagiado=[]
               lectura.seek(0)
          lectura.close()
      except:
           print("Ha ocurrido un problema, el archivo Bogota_covid19.csv no pudo ser leido")
     return Datos      

def mayor_contagio(funcion, Datos):
     '''
     param dict función: El parametro funcion recibe la funcion que va a sumar los totales de contagiados de 
     todas las localidades
     Param dict Datos: El parametro datos es el diccionario con todos los datos recogidos del archivo
     Esta funcion identifica e imprime las 3 primeras localidades con mayor numero de contagios
     '''
     variable=funcion(Datos)
     may1=0
     may2=0
     may3=0
     for llave, valor in variable.items():
          if valor>may3:
               if valor>may2:
                    if valor>may1:
                         may1=valor
                         nombremay1=llave
                    else:     
                         may2=valor
                         nombremay2=llave
               else:
                    may3=valor
                    nombremay3=llave
     print("Localidades con mayor numero de contagios:")
     print(nombremay1+": "+ str(may1))
     print(nombremay2+": "+ str(may2))
     print(nombremay3+": "+ str(may3))
def menor_contagio(funcion, Datos):
     '''
     param dict función: El parametro funcion recibe la funcion que va a sumar los totales de contagiados de 
     todas las localidades
     Param dict Datos: El parametro datos es el diccionario con todos los datos recogidos del archivo
     Esta funcion identifica e imprime las 3 primeras localidades con menor numero de contagios
     '''     
     variable=funcion(Datos)
     may1=99999999999999999999999999999
     may2=99999999999999999999999999999
     may3=99999999999999999999999999999
     for llave, valor in variable.items():
          if valor<may3:
               if valor<may2:
                    if valor<may1:
                         may1=valor
                         nombremay1=llave
                    else:     
                         may2=valor
                         nombremay2=llave
               else:
                    may3=valor
                    nombremay3=llave
     print("Localidades con menor numero de contagios:")
     print(nombremay1+": "+ str(may1))
     print(nombremay2+": "+ str(may2))
     print(nombremay3+": "+ str(may3))  
def estadisticas_localidad(Datos, localidad):
     '''
     Param dict: Datos, este parametro recoge los diccionarios con los datos de
     todos los pacientes
     Param dict: localidad, esta va a ser la localidad que el usuario desea saber los datos 
     Esta funcion recoge todos los datos respecto a una localidad y los imprime de manera ordenada
     '''
     Contagiados=0
     Genero={}
     Casos={}
     Ubicacion={}
     Edad={"Ninos":0, "Adolescentes":0, "Adultos":0}
     Estados={}
     for valor in Datos.values():
          if valor[2]==localidad:
               Contagiados+=1
               if valor[4] not in Genero.keys():
                    Genero[valor[4]]=1
               else:
                    Genero[valor[4]]+=1
               if valor[5] not in Casos.keys():
                    Casos[valor[5]]=1
               else:
                    Casos[valor[5]]+=1
               if valor[6] not in Ubicacion.keys():
                    Ubicacion[valor[6]]=1
               else:
                    Ubicacion[valor[6]]+=1
               if int(valor[3])<=13 :
                    Edad["Ninos"]+=1
               elif int(valor[3])>13 and int(valor[3])<18:
                    Edad["Adolescentes"]+=1     
               else:
                    Edad["Adultos"]+=1
               if valor[7]not in Estados.keys():
                    Estados[valor[7]]=1
               else:
                    Estados[valor[7]]+=1
     print("Total de contagiados: "+str(Contagiados))
     print("SEXO:")
     for llave, valor in Genero.items():
          print((llave)+": "+str(valor))
     print("TIPO DE CASO:")
     for llave, valor in Casos.items():
          print((llave)+": "+str(valor))
     print("UBICACION:")    
     for llave, valor in Ubicacion.items():
          print((llave)+": "+str(valor))
     print("EDAD")
     for llave, valor in Edad.items():
          print((llave)+": "+str(valor))
     print("ESTADO")
     for llave, valor in Estados.items():
          print((llave)+": "+str(valor))   
def imprimir_menu():
  '''
  Imprime el menu
  '''
  print("1. Leer datos")
  print("2. Ver estadísticas por localidad")
  print("3. Contagiados por fecha")
  print("4. Descargar estadísticas por caso")
  print("5. Descargar estadísticas generales")
  print("6. Salir")

def imprimir_submenu(opcion):
  '''
  Imprime el sub menu

  :param str opcion: Opcion del menu principal
  '''
  if opcion == "1":
    STR = "Leer datos"
  elif opcion == "2":
    STR = "Ver estadisticas por localidad"
  elif opcion == "3":
    STR = "Contagiados por fecha"
  elif opcion == "4":
    STR = "Descargar estadisticas por caso"
  elif opcion == "5":
    STR = "Descargar estadisticas generales"
  elif opcion == "6":
    STR = "Salir"
  MSG = "Esta es la opcion "
  print(MSG, STR)
  print("Oprima q para volver al menu principal")  

def  menu():
  '''
  Funcionamiento del menu
  '''
  while True:

    imprimir_menu()
    opcion = input()
    
    if opcion == '1':
      while True:        
        imprimir_submenu(opcion)
        opcion2 = input()

        if opcion2 == 'q':
          break
        else: 
          print('Opcion incorrecta')
         
      
    elif opcion == '2':
      while True:        
        imprimir_submenu(opcion)
        opcion2 = input()

        if opcion2 == 'q':
          break
        else: 
          print('Opcion incorrecta')

    elif opcion == '3':
      while True:        
        imprimir_submenu(opcion)
        opcion2 = input()

        if opcion2 == 'q':
          break
        else: 
          print('Opcion incorrecta') 

    elif opcion == '4':
     while True:        
        imprimir_submenu(opcion)
        opcion2 = input()

        if opcion2 == 'q':
          break
        else: 
          print('Opcion incorrecta')

    elif opcion == '5':
     while True:        
        imprimir_submenu(opcion)
        opcion2 = input()

        if opcion2 == 'q':
          break
        else: 
          print('Opcion incorrecta')

    elif opcion == '6':
      break

    else:
      print('Opcion incorrecta')

def  contagiados_rango_fecha(dictionary, date_string_down, date_string_up):
"""
La funcion recibe un diccionario con todos los datos de contagiados en Bogota,
compara si las fechas de cada persona estan en el rango ingresado.
Al final imprime los casos totalales en ese rango de fechas,
también imprime los casos por localidad en orden alfabetico.
 
param dict dictionary: diccionario con los datos de todos los contagiados en Bogota
param str date_string_down: cadena de caracteres con la fecha más antigua del rango
param str date_string_up: cadena de caracteres con la fecha más reciente del rango
"""
  dictionary = dict(dictionary)
	top = date_string_up[:]
	low = date_string_down[:]
	counter = 0
	dictionary_2 = dict()
	set_1 = set()
	for index in range(1, (len(dictionary)+1 ), 1): 
		data = dictionary[index]
		date = data[0]
		localidad = data[2]
		if (((int(date[:2]) >= int(low[:2])) and (int(date[:2]) <= int(top[:2]))) and ((int(date[3:5]) >= int(low[3:5])) and (int(date[3:5]) <= int(top[3:5])))):
			counter += 1
			if localidad in dictionary_2.keys():
				X = dictionary_2[localidad]
				X += 1
				dictionary_2[localidad] = X
			else:
				dictionary_2[localidad] = 1
			set_1.add(localidad)
	list_1 = list(set_1)
	list_2 = sorted(list_1)
	line = 47*"-"
	total = str(counter)
	string = " "*(22-len(total))
	string_2 = " "*(22-len("TOTAL"))
	print_1 = "|" + string_2 + "TOTAL" + "|" + string + total + "|"
	print(line)
	print("|             LOCALIDAD|  CASOS DIAGNOSTICADOS|")
	print(line)
	print(print_1)
	print(line)
	for key in list_2:
		character = str(dictionary_2[key])
		len_character = len(character)
		character_2 = " "*(22-len_character)
		character_3 = " "*(22-(len(key)))
		print_character = "|" + character_3 + key + "|" + character_2 + character + "|"
		print(print_character)
		print(line)
	
def descargar_estadisticas_generales(dictionary):
"""
La funcion recibe un diccionario con todos los datos de contagiados en Bogota,
cuenta la ocurrencia de las ubicaciones, tipos de casos, generos y edades por localidad,
junta los datos como strings en un una lista que contiene todas las lineas de informacion,
utilizando el formato .csv (comma separated value) con separador ",";
para adjuntarlos al archivo estadisticas_generales.csv

param dict dictionary: diccionario con los datos de todos los contagiados en Bogota
"""
	dictionary = dict(dictionary)
	dictionary_2 = dict()
	case = dict()
	place = dict()
	gender = dict()
	set_1 = set()
	sub_list_1 = [0,0,0,0,0]
	sub_list_2 = [0,0,0,0]
	for index in range(1, (len(dictionary)+1 ), 1):
		data = dictionary[index]
		data = data[2:7]
		set_1.add(data[0])
		localidad = data[0]
		if int(data[1]) < 14:
			age = "N"
		elif int(data[1]) > 17:
			age = "A"
		else:
			age = "J"
		sex = data[2]
		case_type = data[3]
		ubicacion = data[4]                                           
		if localidad in dictionary_2.keys():                 
			X = dictionary_2[localidad]
			X += 1
			dictionary_2[localidad] = X
		else:
			dictionary_2[localidad] = 1
		if localidad in case.keys():             
			X = case[localidad]
			if case_type == "desconocido":
				X[0] +=  1
			elif case_type == "en estudio":
				X[1] += 1
            elif case_type == "relacionado":
				X[2] += 1
			elif case_type == "importado":
				X[3] += 1
            case[localidad] = X
        else:
			case[localidad] = sub_list_2
	    if localidad in place.keys():                  
			X = place[localidad]
			if ubicacion == "casa":
				X[0] +=  1
			elif ubicacion == "hospital":
				X[1] +=  1
            elif ubicacion == "hospital uci":
				X[2] +=  1
			elif ubicacion == "fallecido":
				X[3] +=  1
			else:
				X[4] +=  1	
            place[localidad] = X
        else:
			place[localidad] = sub_list_1
        if localidad in gender.keys():                
			X = gender[localidad]
			if sex == "h":
				X[0] +=  1
			else:
				X[1] +=  1
            if age == "N":
				X[2] +=  1
			elif ubicacion == "J":
				X[3] +=  1
			else:
				X[4] +=  1	
            gender[localidad] = X
        else:
			gender[localidad] = sub_list_1
    lst = list(set_1)
	lst = sorted(lst)
	list_1 = [["LOCALIDAD,UBICACION,,,,,CASO,,,,GENERO,,EDAD,,"],["Alfabeticamente,Hospital,Hospital UCI,Fallecido,Fallecido No aplica No causa Directa,Desconocido,En estudio,Relacionado,Importado,H,M,Niños,Adolescentes,Adultos"]]
	for key in lst:
		totalal = dictionary_2[key]
		localidad = str(key) + ","
		ubicacion_1 = [(str((ubicacion/total)*100)+"%") for ubicacion in place[key]]
		ubicacion = ""
		for character in ubicacion_1:
			ubicacion += (character+",")
		case_type_1 = [(str((case_type/total)*100)+"%") for case_type in case[key]]
		case_type = ""
		for character in case_type_1:
			case_type += (character+",")
		information_1 =  [(str((information/total)*100)+"%") for information in gender[key]]
		information = ""
		for character in information_1:
			information += (character+",")
		data_line = localidad+ubicacion+case_type+information[:(len(information)-1)]
		list_1.append(data_line)
	try:
		file = open("archivos\estadisticas_generales.csv", "w")
		for line in list_1:	
			file.write(line + "\n")
		file.close()
	except:
		print("El archivo estadisticas_generales.csv no pudo ser creado")

def main():
  menu()
def descargar_estadisticas_generales(dictionary):
"""
La funcion recibe un diccionario con todos los datos de contagiados en Bogota,
cuenta la ocurrencia de las ubicaciones, tipos de casos, generos y edades por localidad,
junta los datos como strings en un una lista que contiene todas las lineas de informacion,
utilizando el formato .csv (comma separated value) con separador ",";
para adjuntarlos al archivo estadisticas_generales.csv

param dict dictionary: diccionario con los datos de todos los contagiados en Bogota
"""
    dictionary = dict(dictionary)
    dictionary_2 = dict()
    case = dict()
    place = dict()
    gender = dict()
    set_1 = set()
    sub_list_1 = [0,0,0,0,0]
    sub_list_2 = [0,0,0,0]
    for dat in dictionary.values():
        data = dat[2:7]
        set_1.add(data[0])
        localidad = data[0]
        if int(data[1]) < 14:
            age = "N"
        elif int(data[1]) > 17:
            age = "A"
        else:
            age = "J"
        sex = data[2]
        case_type = data[3]
        ubicacion = data[4]                                           
        if localidad in dictionary_2.keys():                 
            X = list(dictionary_2[localidad])
            X += 1
            dictionary_2[localidad] = X
        else:
            dictionary_2[localidad] = 1
        if localidad in case.keys():             
            X = list(case[localidad])
            if case_type == "desconocido":
                X[0] +=  1
            elif case_type == "en estudio":
                X[1] += 1
            elif case_type == "relacionado":
                X[2] += 1
            elif case_type == "importado":
                X[3] += 1
            case[localidad] = X
        else:
            case[localidad] = sub_list_2
        if localidad in place.keys():
            X = list(place[localidad])
            if ubicacion == "casa":
                X[0] +=  1
            elif ubicacion == "hospital":
                X[1] +=  1
            elif ubicacion == "hospital uci":
                X[2] +=  1
            elif ubicacion == "fallecido":
                X[3] +=  1
            else:
                X[4] +=  1    
            place[localidad] = X
        else:
            place[localidad] = sub_list_1
        if localidad in gender.keys():                
            X = list(gender[localidad])
            if sex == "f":
                X[0] +=  1
            else:
                X[1] +=  1
            if age == "N":
                X[2] +=  1
            elif age == "J":
                X[3] +=  1
            else:
                X[4] +=  1    
            gender[localidad] = X
        else:
            gender[localidad] = sub_list_1
    lst = list(set_1)
    lst = sorted(lst)
    list_1 = ["LOCALIDAD,UBICACION,,,,,CASO,,,,GENERO,,EDAD,,","Alfabeticamente,Hospital,Hospital UCI,Fallecido,Fallecido No aplica No causa Directa,Desconocido,En estudio,Relacionado,Importado,Mujeres,Hombres,Niños,Adolescentes,Adultos"]
    for key in lst:
        total = dictionary_2[key]
        localidad = str(key) + ","
        ubicacion_1 = [(str(round(((ubicacion_value/total)*100), 2))+"%") for ubicacion_value in list(place[key])]
        ubicacion = ""
        for character in ubicacion_1:
            ubicacion += (character+",")
        case_type_1 = [(str((round(((case_type_value/total)*100), 2))+"%") for case_type_value in list(case[key])]
        case_type = ""
        for character in case_type_1:
            case_type += (character+",")
        information_1 =  [(str(round(((information_value/total)*100), 2))+"%") for information_value in list(gender[key])]
        information = ""
        for character in information_1:
            information += (character+",")
        data_line = localidad+ubicacion+case_type+information[:(len(information)-1)]
        list_1.append(data_line)
    try:
        file = open("archivos\estadisticas_generales.csv", "w")
        for line in list_1:    
            file.write(line + "\n")
        file.close()
    except:
        print("El archivo estadisticas_generales.csv no pudo ser creado") 
main()
